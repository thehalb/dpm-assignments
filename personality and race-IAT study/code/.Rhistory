print(h1(data_processed_after_exclusions, bfi_subscales[i], custom_titles[i], custom_xlabels[i]))
}
h2 <- function(data, variable, title) {
ggplot(data = data, aes(x = .data[[variable]])) +
geom_histogram(binwidth = 0.05, fill = "pink", color = "black", alpha = 0.5) +
labs(title = "Distribution of IAT D-Scores", x = "D Score", y = "Frequency") +
theme_classic() +
scale_x_continuous(breaks = pretty_breaks(n = 10))
}
h2(data_processed_after_exclusions, "D_Score", "IAT D-Score")
data_correlation_matrix <- data_processed_after_exclusions |>
dplyr::select(c(mean_bfi_a, mean_bfi_c, mean_bfi_e, mean_bfi_n, mean_bfi_o, D_Score))
cor_matrix <- cor(data_correlation_matrix, use = "pairwise.complete.obs")
cor_matrix_rounded <- round(cor_matrix, 2)
print(cor_matrix_rounded)
scores_men <- data_processed_after_exclusions$D_Score[data_processed_after_exclusions$sex == "m"]
scores_women <- data_processed_after_exclusions$D_Score[data_processed_after_exclusions$sex == "f"]
# Perform the t-test
t_test_result <- report(t.test(scores_men, scores_women, alternative = "two.sided"))
# Print the t-test result
t_test_result
bfi_subscale_names <- c("mean_bfi_a", "mean_bfi_c", "mean_bfi_e", "mean_bfi_n", "mean_bfi_o")
for (subscale in bfi_subscale_names) {
formula <- as.formula(paste("D_Score ~", subscale))
regression_model <- report(lm(formula, data = data_processed_after_exclusions))
cat("Regression for", subscale, "\n")
print(summary(regression_model))
cat("\n")
}
# Calculate IAT score cutoffs
iat_score_cutoff_top <- quantile(data_processed_after_exclusions$D_Score, 0.9, na.rm = TRUE)
iat_score_cutoff_bottom <- quantile(data_processed_after_exclusions$D_Score, 0.1, na.rm = TRUE)
# Create a column indicating extreme or normal IAT scores
data_processed_after_exclusions <- data_processed_after_exclusions |>
mutate(extreme_iat = ifelse(D_Score >= iat_score_cutoff_top | D_Score <= iat_score_cutoff_bottom,
"extreme",
"normal"))
# Function to create scatter plot
function_scatter_plot_bfi <- function(column, name_subscale) {
ggplot(data_processed_after_exclusions, aes(x = get(column), y = D_Score)) +
geom_point(aes(shape = extreme_iat), alpha = 0.7) +
scale_shape_manual(values = c(extreme = 17, normal = 16)) +
geom_smooth(method = "lm") +
ggtitle(name_subscale) +
xlab(paste0("Mean ", name_subscale)) +
ylab("D-Score") +
theme_classic() +
theme(legend.position = "none")
}
agreeableness_plot <- function_scatter_plot_bfi("mean_bfi_a", "Agreeableness")
conscientiousness_plot <- function_scatter_plot_bfi("mean_bfi_c", "Conscientiousness")
extraversion_plot <- function_scatter_plot_bfi("mean_bfi_e", "Extraversion")
neuroticism_plot <- function_scatter_plot_bfi("mean_bfi_n", "Neuroticism")
openness_plot <- function_scatter_plot_bfi("mean_bfi_o", "Openness")
print(agreeableness_plot)
print(conscientiousness_plot)
print(extraversion_plot)
print(neuroticism_plot)
print(openness_plot)
combining_bfi_plots <- agreeableness_plot + conscientiousness_plot + extraversion_plot + neuroticism_plot + openness_plot
print(combining_bfi_plots)
ggsave("../communications/combined_plot.png", combining_bfi_plots, width = 18, height = 12, units = "cm")
ggsave("../communications/combined_plot.pdf", combining_bfi_plots, width = 18, height = 12, units = "cm")
knitr::opts_chunk$set(echo = TRUE)
# show results
print(paste0("Age was available for ", alpha_agreeableness))
histogram_distribution_subscales <- function(data, subscale, title, xlab) {
ggplot(data, aes(x = !!sym(subscale))) +
geom_histogram(binwidth = 0.1,
boundary = 0,
fill = "pink",
color = "black") +
xlab(xlab) +
ylab("Frequency") +
ggtitle(title) +
theme_classic() +
scale_x_continuous(breaks = pretty_breaks(n = 9)) +
coord_cartesian(xlim = c(1, 6))
}
bfi_subscales <- c("mean_bfi_a", "mean_bfi_o", "mean_bfi_c", "mean_bfi_e", "mean_bfi_n")
custom_titles <- c("Agreeableness", "Openness", "Conscientiousness", "Extraversion", "Neuroticism")
custom_xlabels <- c("Mean BFI Agreeableness", "Mean BFI Openness", "Mean BFI Conscientiousness", "Mean BFI Extraversion", "Mean BFI Neuroticism")
for (i in seq_along(bfi_subscales)) {
print(h1(data_processed_after_exclusions, bfi_subscales[i], custom_titles[i], custom_xlabels[i]))
}
histogram_distribution_subscales
histogram_distribution_subscales <- function(data, subscale, title, xlab) {
ggplot(data, aes(x = !!sym(subscale))) +
geom_histogram(binwidth = 0.1,
boundary = 0,
fill = "pink",
color = "black") +
xlab(xlab) +
ylab("Frequency") +
ggtitle(title) +
theme_classic() +
scale_x_continuous(breaks = pretty_breaks(n = 9)) +
coord_cartesian(xlim = c(1, 6))
}
bfi_subscales <- c("mean_bfi_a", "mean_bfi_o", "mean_bfi_c", "mean_bfi_e", "mean_bfi_n")
custom_titles <- c("Agreeableness", "Openness", "Conscientiousness", "Extraversion", "Neuroticism")
custom_xlabels <- c("Mean BFI Agreeableness", "Mean BFI Openness", "Mean BFI Conscientiousness", "Mean BFI Extraversion", "Mean BFI Neuroticism")
for (i in seq_along(bfi_subscales)) {
print(histogram_distribution_subscales(data_processed_after_exclusions, bfi_subscales[i], custom_titles[i], custom_xlabels[i]))
}
histrogram_d_scores <- function(data, variable, title) {
ggplot(data = data, aes(x = .data[[variable]])) +
geom_histogram(binwidth = 0.05, fill = "pink", color = "black", alpha = 0.5) +
labs(title = "Distribution of IAT D-Scores", x = "D Score", y = "Frequency") +
theme_classic() +
scale_x_continuous(breaks = pretty_breaks(n = 10))
}
histrogram_d_scores(data_processed_after_exclusions, "D_Score", "IAT D-Score")
data_correlation_matrix <- data_processed_after_exclusions |>
dplyr::select(c(mean_bfi_a, mean_bfi_c, mean_bfi_e, mean_bfi_n, mean_bfi_o, D_Score))
cor_matrix <- cor(data_correlation_matrix, use = "pairwise.complete.obs")
cor_matrix_rounded <- round(cor_matrix, 2)
print(cor_matrix_rounded)
# Calculate D Score cutoffs
iat_score_cutoff_top <- quantile(data_processed_after_exclusions$D_Score, 0.9, na.rm = TRUE)
iat_score_cutoff_bottom <- quantile(data_processed_after_exclusions$D_Score, 0.1, na.rm = TRUE)
# Create a column indicating extreme or normal IAT scores
data_processed_after_exclusions <- data_processed_after_exclusions |>
mutate(extreme_iat = ifelse(D_Score >= iat_score_cutoff_top | D_Score <= iat_score_cutoff_bottom,
"extreme",
"normal"))
# Function to create scatter plot
function_scatter_plot_bfi <- function(column, name_subscale) {
ggplot(data_processed_after_exclusions, aes(x = get(column), y = D_Score)) +
geom_point(aes(shape = extreme_iat), alpha = 0.7) +
scale_shape_manual(values = c(extreme = 17, normal = 16)) +
geom_smooth(method = "lm",color = "black") +
ggtitle(name_subscale) +
xlab(paste0("Mean ", name_subscale)) +
ylab("D-Score") +
theme_classic() +
theme(legend.position = "none")
}
agreeableness_plot <- function_scatter_plot_bfi("mean_bfi_a", "Agreeableness")
extraversion_plot <- function_scatter_plot_bfi("mean_bfi_e", "Extraversion")
openness_plot <- function_scatter_plot_bfi("mean_bfi_o", "Openness")
print(agreeableness_plot)
print(agreeableness_plot)
print(conscientiousness_plot)
print(conscientiousness_plot)
print(extraversion_plot)
print(extraversion_plot)
print(neuroticism_plot)
print(neuroticism_plot)
print(openness_plot)
# Function to create scatter plot
function_scatter_plot_bfi <- function(column, name_subscale) {
ggplot(data_processed_after_exclusions, aes(x = get(column), y = D_Score)) +
geom_point(aes(shape = extreme_iat), alpha = 0.7) +
scale_shape_manual(values = c(extreme = 17, normal = 16)) +
geom_smooth(method = "lm",color = "black") +
ggtitle(name_subscale) +
xlab(paste0("Mean ", name_subscale)) +
ylab("D-Score") +
theme_classic() +
theme(legend.position = "none")
}
agreeableness_plot <- function_scatter_plot_bfi("mean_bfi_a", "Agreeableness")
extraversion_plot <- function_scatter_plot_bfi("mean_bfi_e", "Extraversion")
openness_plot <- function_scatter_plot_bfi("mean_bfi_o", "Openness")
print(agreeableness_plot)
print(agreeableness_plot)
print(conscientiousness_plot)
print(conscientiousness_plot)
print(extraversion_plot)
print(neuroticism_plot)
print(neuroticism_plot)
print(openness_plot)
knitr::opts_chunk$set(message = FALSE,
warning = FALSE)
library(dplyr)
library(tidyr)
library(janitor)
library(stringr)
library(readr)
library(openxlsx)
data_raw_bfi <- read_csv("../data/raw/data_raw_bfi.csv") |>
janitor::clean_names()
data_raw_iat <- read_csv("../data/raw/data_raw_iat.csv", skip = 1) |>
janitor::clean_names()
data_raw_demographics <- read_csv("../data/raw/data_raw_demographics.csv") |>
janitor::clean_names()
# remove rows with missing unique_id
data_demographics_without_missing_id <- data_raw_demographics |>
filter(!is.na(unique_id))
# transform demographics into wide format and check if sex has only "f" and "m" as answers and if age is a number
dat_age_gender <- data_demographics_without_missing_id |>
pivot_wider(names_from = variable,
values_from = response) |>
mutate(sex = case_when(sex %in% c("f", "m") ~ sex,
TRUE ~ "missing/other/error"),
age = case_when(str_detect(age, "^[0-9]+$") ~ age,
TRUE ~ "other/missing/error"))
# List of columns to reverse score for each personality trait
personality_traits <- list(c("bfi_e2", "bfi_e5", "bfi_e7", "bfi_c2", "bfi_c4", "bfi_c5", "bfi_c9", "bfi_n2", "bfi_n5", "bfi_n7", "bfi_a1", "bfi_a3", "bfi_a6", "bfi_a8", "bfi_o7", "bfi_o9"))
# Function to reverse score
reverse_score <- function(data, cols) {
data |>
mutate(across(all_of(cols), ~7 - .))
}
# Apply reverse scoring
data_bfi_reversed_scores <- data_raw_bfi
for (trait in personality_traits) {
data_bfi_reversed_scores <- reverse_score(data_bfi_reversed_scores, trait)
}
# Function to perform correlation check
check_correlations <- function(data, trait) {
relevant_cols <- grep(paste0("bfi_[", trait, "]\\d"), names(data), value = TRUE)
cor_matrix <- cor(data[relevant_cols], use = "complete.obs")
return(cor_matrix)
}
# List of personality traits
traits <- c("a", "e", "c", "o", "n")
# Correlation
correlation_results <- lapply(traits, function(trait) {
i <- paste0("bfi_", trait)
cor_matrix <- check_correlations(data_bfi_reversed_scores, trait)
print(cor_matrix)
# Check if all correlations are positive
message <- ifelse(all(cor_matrix > 0),
paste0("All the correlations of the subscale ", i, " of the BFI are positive."),
paste0("NOT all of the correlations of the subscale ", i, " of the BFI are positive."))
print(message)
return(cor_matrix)
})
names(correlation_results) <- paste0("bfi_", traits)
exclude_bfi_min_max <- data_bfi_reversed_scores |>
rowwise() |>
mutate(exclude_impossible_data = ifelse(any(c_across(starts_with("bfi_")) < 1 | c_across(starts_with("bfi_")) > 6, na.rm = TRUE), "exclude", "include")) |>
ungroup() |>
dplyr::select(unique_id, exclude_impossible_data)
exclude_incomplete_subscales <- data_bfi_reversed_scores |>
rowwise() |>
mutate(
exclude_incomplete_data = ifelse(
(all(is.na(c_across(starts_with("bfi_a")))) | all(!is.na(c_across(starts_with("bfi_a"))))) &
(all(is.na(c_across(starts_with("bfi_c")))) | all(!is.na(c_across(starts_with("bfi_c"))))) &
(all(is.na(c_across(starts_with("bfi_e")))) | all(!is.na(c_across(starts_with("bfi_e"))))) &
(all(is.na(c_across(starts_with("bfi_n")))) | all(!is.na(c_across(starts_with("bfi_n"))))) &
(all(is.na(c_across(starts_with("bfi_o")))) | all(!is.na(c_across(starts_with("bfi_o"))))),
"include",
"exclude"
)
)|>
dplyr::select(unique_id, exclude_incomplete_data)
data_bfi_reversed_scores$mean_bfi_a <- rowMeans(dplyr::select(data_bfi_reversed_scores,starts_with("bfi_a")),
na.rm = TRUE)
data_bfi_reversed_scores$mean_bfi_o <- rowMeans(dplyr::select(data_bfi_reversed_scores,starts_with("bfi_o")),
na.rm = TRUE)
data_bfi_reversed_scores$mean_bfi_c <- rowMeans(dplyr::select(data_bfi_reversed_scores,starts_with("bfi_c")),
na.rm = TRUE)
data_bfi_reversed_scores$mean_bfi_e <- rowMeans(dplyr::select(data_bfi_reversed_scores,starts_with("bfi_e")),
na.rm = TRUE)
data_bfi_reversed_scores$mean_bfi_n <- rowMeans(dplyr::select(data_bfi_reversed_scores,starts_with("bfi_n")),
na.rm = TRUE)
# min and max possible score is 1 and 6
out_of_range_counts <- data_bfi_reversed_scores |>
rowwise() |>
summarize(
across(starts_with("mean_bfi"), ~ sum(!is.na(.) && (. > 6 || . < 1), na.rm = TRUE))
)
# Print the result
if (any(out_of_range_counts > 0)) {
print("Some mean scores violate the min and max possible score (1 and 6). Please revise your scoring code.")
} else {
print("All mean scores are within the valid range.")
}
# Exclude blocks other than 3, 4, 6 and 7
iat_without_trials <- data_raw_iat[data_raw_iat$block_number %in% c(3, 4, 6, 7), ]
# Group
iat_without_trials_grouped <- iat_without_trials |>
group_by(unique_id)
# Calculate mean RT: Blocks 3 and 6
iat_without_trials_grouped_mean <- iat_without_trials_grouped |>
filter(block_number %in% c(3, 6)) |>
summarise(mean1 = mean(trial_reaction_time_in_ms, na.rm = TRUE))
# Calculate mean RT: Blocks 4 and 7
iat_without_trials_grouped_mean<- iat_without_trials_grouped |>
filter(block_number %in% c(4, 7)) |>
summarise(mean2 = mean(trial_reaction_time_in_ms, na.rm = TRUE)) |>
full_join(iat_without_trials_grouped_mean, by = "unique_id")
# Calculate SD
iat_without_trials_grouped_sd <- iat_without_trials_grouped |>
filter(block_number %in% c(3, 4, 6, 7)) |>
summarise(SD = sd(trial_reaction_time_in_ms, na.rm = TRUE))
# Calculate D
data_frame_D_score <- iat_without_trials_grouped_mean |>
full_join(iat_without_trials_grouped_sd, by = "unique_id") |>
mutate(D_Score = (mean2 - mean1) / SD) |>
dplyr::select(unique_id, D_Score)
print(data_frame_D_score)
if(all(data_frame_D_score$D_Score >= -2 & data_frame_D_score$D_Score <= 2)) {
print("Sanity check passed: All D scores are in the range -2 to +2.")
} else {
print("Sanity check failed: Revise your implementation of the scoring code.")
}
data_iat_incomplete_trial_level <- iat_without_trials |>
group_by(unique_id) |>
mutate(exclude_iat_incomplete = ifelse(!(all(c(3, 4, 6, 7) %in% block_number) & n() == 120), "exclude", "include")) |>
dplyr::select(unique_id, exclude_iat_incomplete)
exclude_iat_performance <- iat_without_trials |>
group_by(unique_id) |>
summarise(
total_trials = n(),
trials_below_threshold = sum(trial_reaction_time_in_ms < 300),
accuracy = sum(trial_accuracy == "correct") / total_trials
)
unique_ids_in_data_D_score <- data_frame_D_score$unique_id
# Identify participants to exclude based on low accuracy
participants_to_exclude_low_accuracy <- exclude_iat_performance$unique_id[
exclude_iat_performance$accuracy < 0.75 &
exclude_iat_performance$unique_id %in% unique_ids_in_data_D_score
]
# Identify participants to exclude based on short reaction times
participants_to_exclude_short_rt <- exclude_iat_performance$unique_id[
exclude_iat_performance$trials_below_threshold > 0.1 * exclude_iat_performance$total_trials &
exclude_iat_performance$unique_id %in% unique_ids_in_data_D_score
]
iat_exclusion <- c(
data_iat_incomplete_trial_level$exclude_iat_incomplete,
participants_to_exclude_short_rt,
participants_to_exclude_low_accuracy
)
# Create exclusion variable in the D_score dataset
data_iat_D_exclusions <- data_frame_D_score |>
mutate(exclude_iat = case_when(unique_id %in% iat_exclusion ~ "exclude", TRUE ~ "include"))
head(data_iat_D_exclusions)
data_processed_before_exclusions <-  data_bfi_reversed_scores|>
full_join(dat_age_gender, by = "unique_id") |>
full_join(data_iat_D_exclusions, by = "unique_id") |>
full_join(exclude_bfi_min_max, by = "unique_id") |>
full_join(exclude_incomplete_subscales, by = "unique_id")
# Creates master exclude variable "exclude_participant"
data_processed <- data_processed_before_exclusions |>
mutate(
exclude_participant = case_when(exclude_iat == "exclude" ~ "exclude",
exclude_impossible_data == "exclude" ~ "exclude",
exclude_incomplete_data == "exclude" ~ "exclude",
TRUE ~ "include"))
# in case this dir doesn't exist, create it
dir.create("../data/processed/")
# save data to disk in that dir
write_csv(data_processed, "../data/processed/data_processed.csv")
if(!file.exists("../data/processed/data_processed_codebook.xlsx")){
# convert the column names to a df
codebook_template <- data.frame(variable = colnames(data_processed)) |>
mutate(explanation = NA)
# write to disk as an excel file
write.xlsx(codebook_template, file = "../data/processed/data_processed_codebook.xlsx")
}
sessionInfo()
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(knitr)
library(kableExtra)
library(janitor)
library(scales)
library(psych)
library(ggplot2)
library(dplyr)
library(ltm)
library(report)
library(cowplot)
library(patchwork)
data_processed <- read_csv("../data/processed/data_processed.csv")
data_processed |>
count(name = "n") |>
kable() |>
add_header_above(header = c("Whole sample" = 1)) |>
kable_classic(full_width = FALSE)
data_processed_after_exclusions <- data_processed |>
filter(exclude_participant == "include" & !is.na(exclude_participant))
data_processed_after_exclusions |>
count(name = "n") |>
kable() |>
add_header_above(header = c("For analysis" = 1)) |>
kable_classic(full_width = FALSE)
data_processed_after_exclusions |>
mutate(age = as.numeric(age)) |>
summarise(Mean = mean(age, na.rm = TRUE),
SD = sd(age, na.rm = TRUE)) |>
mutate_all(.funs = janitor::round_half_up, digits = 1) |>
kable() |>
add_header_above(header = c("Age" = 2)) |>
kable_classic(full_width = FALSE)
data_processed_after_exclusions |>
group_by(sex) |>
summarise(n = n()) |>
mutate(Percent = paste0(round_half_up((n / sum(n)) * 100, 1), "%")) |>
kable() |>
kable_classic(full_width = FALSE)
availability_age <-
(sum(!is.na(data_processed_after_exclusions$age) & data_processed_after_exclusions$age != "other/missing/error") / nrow(data_processed_after_exclusions)) |>
round(2)
print(paste0("Age was available for ", availability_age))
availability_sex <-
(sum(!is.na(data_processed_after_exclusions$sex) & data_processed_after_exclusions$sex %in% c("f", "m")) / nrow(data_processed_after_exclusions)) |>
round(2)
print(paste0("Gender was available for ", availability_sex))
# Function
calculate_alpha_subscale <- function(data, subscale, n) {
items_subscale <- paste0("bfi_", subscale, 1:n)
subscale_data <- data[, items_subscale, drop = FALSE]
# Remove NA´s
subscale_data <- na.omit(subscale_data)
# Check if enough data is available after removing NAs
if (nrow(subscale_data) < 3) {
warning("Nicht genügend Daten für die Berechnung von Cronbach's Alpha.")
return(NA)
}
# Calculating Cronbach's Alpha
alpha_result <- psych::alpha(subscale_data)
alpha_value <- alpha_result$total
return(alpha_value)
}
# Calculating Chronbachs Alpha for each subscale
alpha_agreeableness <- calculate_alpha_subscale(data_processed_after_exclusions, "a", 9)
alpha_conscientiousness <- calculate_alpha_subscale(data_processed_after_exclusions, "c", 9)
alpha_extraversion <- calculate_alpha_subscale(data_processed_after_exclusions, "e", 8)
alpha_neuroticism <- calculate_alpha_subscale(data_processed_after_exclusions, "n", 8)
alpha_openness <- calculate_alpha_subscale(data_processed_after_exclusions, "o", 10)
# show results
alpha_agreeableness
alpha_conscientiousness
alpha_extraversion
alpha_neuroticism
alpha_openness
histogram_distribution_subscales <- function(data, subscale, title, xlab) {
ggplot(data, aes(x = !!sym(subscale))) +
geom_histogram(binwidth = 0.1,
boundary = 0,
fill = "pink",
color = "black") +
xlab(xlab) +
ylab("Frequency") +
ggtitle(title) +
theme_classic() +
scale_x_continuous(breaks = pretty_breaks(n = 9)) +
coord_cartesian(xlim = c(1, 6))
}
bfi_subscales <- c("mean_bfi_a", "mean_bfi_o", "mean_bfi_c", "mean_bfi_e", "mean_bfi_n")
custom_titles <- c("Agreeableness", "Openness", "Conscientiousness", "Extraversion", "Neuroticism")
custom_xlabels <- c("Mean BFI Agreeableness", "Mean BFI Openness", "Mean BFI Conscientiousness", "Mean BFI Extraversion", "Mean BFI Neuroticism")
for (i in seq_along(bfi_subscales)) {
print(histogram_distribution_subscales(data_processed_after_exclusions, bfi_subscales[i], custom_titles[i], custom_xlabels[i]))
}
histrogram_d_scores <- function(data, variable, title) {
ggplot(data = data, aes(x = .data[[variable]])) +
geom_histogram(binwidth = 0.05, fill = "pink", color = "black", alpha = 0.5) +
labs(title = "Distribution of IAT D-Scores", x = "D Score", y = "Frequency") +
theme_classic() +
scale_x_continuous(breaks = pretty_breaks(n = 10))
}
histrogram_d_scores(data_processed_after_exclusions, "D_Score", "IAT D-Score")
data_correlation_matrix <- data_processed_after_exclusions |>
dplyr::select(c(mean_bfi_a, mean_bfi_c, mean_bfi_e, mean_bfi_n, mean_bfi_o, D_Score))
cor_matrix <- cor(data_correlation_matrix, use = "pairwise.complete.obs")
cor_matrix_rounded <- round(cor_matrix, 2)
print(cor_matrix_rounded)
scores_men <- data_processed_after_exclusions$D_Score[data_processed_after_exclusions$sex == "m"]
scores_women <- data_processed_after_exclusions$D_Score[data_processed_after_exclusions$sex == "f"]
# Perform the t-test
t_test_result <- report(t.test(scores_men, scores_women, alternative = "two.sided"))
# Print the t-test result
t_test_result
bfi_subscale_names <- c("mean_bfi_a", "mean_bfi_c", "mean_bfi_e", "mean_bfi_n", "mean_bfi_o")
for (subscale in bfi_subscale_names) {
formula <- as.formula(paste("D_Score ~", subscale))
regression_model <- report(lm(formula, data = data_processed_after_exclusions))
cat("Regression for", subscale, "\n")
print(summary(regression_model))
cat("\n")
}
# Calculate D Score cutoffs
iat_score_cutoff_top <- quantile(data_processed_after_exclusions$D_Score, 0.9, na.rm = TRUE)
iat_score_cutoff_bottom <- quantile(data_processed_after_exclusions$D_Score, 0.1, na.rm = TRUE)
# Create a column indicating extreme or normal IAT scores
data_processed_after_exclusions <- data_processed_after_exclusions |>
mutate(extreme_iat = ifelse(D_Score >= iat_score_cutoff_top | D_Score <= iat_score_cutoff_bottom,
"extreme",
"normal"))
# Function to create scatter plot
function_scatter_plot_bfi <- function(column, name_subscale) {
ggplot(data_processed_after_exclusions, aes(x = get(column), y = D_Score)) +
geom_point(aes(shape = extreme_iat), alpha = 0.7) +
scale_shape_manual(values = c(extreme = 17, normal = 16)) +
geom_smooth(method = "lm",color = "black") +
ggtitle(name_subscale) +
xlab(paste0("Mean ", name_subscale)) +
ylab("D-Score") +
theme_classic() +
theme(legend.position = "none")
}
agreeableness_plot <- function_scatter_plot_bfi("mean_bfi_a", "Agreeableness")
conscientiousness_plot <- function_scatter_plot_bfi("mean_bfi_c", "Conscientiousness")
extraversion_plot <- function_scatter_plot_bfi("mean_bfi_e", "Extraversion")
neuroticism_plot <- function_scatter_plot_bfi("mean_bfi_n", "Neuroticism")
openness_plot <- function_scatter_plot_bfi("mean_bfi_o", "Openness")
print(agreeableness_plot)
print(conscientiousness_plot)
print(extraversion_plot)
print(neuroticism_plot)
print(openness_plot)
combining_bfi_plots <- agreeableness_plot + conscientiousness_plot + extraversion_plot + neuroticism_plot + openness_plot
print(combining_bfi_plots)
ggsave("../communications/combined_plot.png", combining_bfi_plots, width = 18, height = 12, units = "cm")
ggsave("../communications/combined_plot.pdf", combining_bfi_plots, width = 18, height = 12, units = "cm")
